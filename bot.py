import logging
from telebot import TeleBot, types
from config import *
from gpt import GPT
from yandex_gpt import count_tokens_in_dialogue, get_creds, create_prompt

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    filename=LOGS_FILE,
    filemode="w",
)

logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

users_history = {}
bot = TeleBot(TOKEN_BOT)
gpt = GPT()
logging.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –Ω—É–∂–Ω—ã–º–∏ –∫–Ω–æ–ø–æ—á–∫–∞–º–∏
def create_keyboard(buttons_list):
    try:
        keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(*buttons_list)
        return keyboard
    except:
        logging.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start
@bot.message_handler(commands=['start', "help"])
def start(message):
    logging.info(f"{message.chat.id}: {message.text}")
    user_name = message.from_user.first_name
    bot_answer = {"/start" : f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç-—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –∏ –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ —Ç–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—éüëæ\n"
                          f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∂–º–∏ /new_story.\n",
                  "/help" : "–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∂–º–∏ /new_story –∞ –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä, –≥–µ—Ä–æ—è, —Å–µ—Ç—Ç–∏–Ω–≥ "
                            "–∏ –º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∏—Å—Ç–æ—Ä–∏–∏ /begin, –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∂–º–∏ /end",}
    bot.send_message(message.chat.id, bot_answer[message.text],
                     reply_markup=create_keyboard(["/new_story"]))

# –ö–æ–º–∞–Ω–¥–∞ /debug
@bot.message_handler(commands=['debug'])
def debug(message):
    with open(LOGS_FILE, "rb") as f:
        bot.send_document(message.chat.id, f)


@bot.message_handler(commands=["new_story"])
def new_story(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π", reply_markup=create_keyboard(["–•–æ—Ä—Ä–æ—Ä", "–ö–æ–º–µ–¥–∏—è", "–ë–æ–µ–≤–∏–∫"]))
    if user_id not in users_history:
        users_history[user_id] = {"text": "", "tokens": 0, "session_id": 1}
    else:
        users_history[user_id]["session_id"] += 1
        users_history[user_id]["tokens"] = 0
    bot.register_next_step_handler(message, genre)


def genre(message):
    try:
        user_id = message.from_user.id
        if message.content_type != "text":
            bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π",
                             reply_markup=create_keyboard(["–•–æ—Ä—Ä–æ—Ä", "–ö–æ–º–µ–¥–∏—è", "–ë–æ–µ–≤–∏–∫"]))
            bot.register_next_step_handler(message, genre)
            return
        users_history[user_id]["genre"] = message.text
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–≥–æ", reply_markup=create_keyboard(["–®—Ä–µ–∫", "–°–∫—É–±–∏–¥—É", "–î–∞—à–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞", "–ê—è–Ω–∞–º–∏ –†–µ–π"]))
        bot.register_next_step_handler(message, hero)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∂–∞–Ω—Ä–∞: {e}")


def hero(message):
    try:
        user_id = message.from_user.id
        if message.content_type != "text":
            bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –≥–µ—Ä–æ—è –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ–≥–æ", reply_markup=create_keyboard(["–®—Ä–µ–∫", "–°–∫—É–±–∏–¥—É", "–î–∞—à–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞", "–ê—è–Ω–∞–º–∏ –†–µ–π"]))
            bot.register_next_step_handler(message, hero)
            return
        users_history[user_id]["hero"] = message.text
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥:\n\n–ì–æ—Ä–æ–¥ - {SETTING_DICT['–ì–æ—Ä–æ–¥']}.\n\n"
                                          f"–ü—Ä–∏—Ä–æ–¥–∞ - {SETTING_DICT['–ü—Ä–∏—Ä–æ–¥–∞']}.\n\n–ú–∞–≥–∏—è - {SETTING_DICT['–ú–∞–≥–∏—è']}",
                         reply_markup=create_keyboard(["–ì–æ—Ä–æ–¥", "–ü—Ä–∏—Ä–æ–¥–∞", "–ú–∞–≥–∏—è"]))
        bot.register_next_step_handler(message, setting)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–µ—Ä–æ—è: {e}")


def setting(message):
    try:
        user_id = message.from_user.id
        if message.content_type != "text":
            bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π",
                             reply_markup=create_keyboard(["–ì–æ—Ä–æ–¥", "–ü—Ä–∏—Ä–æ–¥–∞", "–ú–∞–≥–∏—è"]))
            bot.register_next_step_handler(message, setting)
            return
        if message.text not in ["–ì–æ—Ä–æ–¥", "–ü—Ä–∏—Ä–æ–¥–∞", "–ú–∞–≥–∏—è"]:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–µ—Ç—Ç–∏–Ω–≥ –∏–ª–∏ –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π",
                             reply_markup=create_keyboard(["–ì–æ—Ä–æ–¥", "–ü—Ä–∏—Ä–æ–¥–∞", "–ú–∞–≥–∏—è"]))
            bot.register_next_step_handler(message, setting)
            return
        users_history[user_id]["setting"] = message.text
        bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å? –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /begin —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", reply_markup=create_keyboard(["/begin"]))
        bot.register_next_step_handler(message, begin)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Ç—Ç–∏–Ω–≥–∞: {e}")


@bot.message_handler(commands=["begin"])
def begin(message):
    try:
        user_id = message.from_user.id
        if message.content_type != "text":
            bot.send_message(user_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            bot.send_message(message.chat.id,
                             "–•–æ—Ç–∏—Ç–µ —á—Ç–æ –Ω–∏–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å? –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–∂–º–∏—Ç–µ /begin —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                             reply_markup=create_keyboard(["/begin"]))
            bot.register_next_step_handler(message, begin)
            return
        if user_id not in users_history:
            bot.send_message(message.chat.id, "–í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            new_story(message)
            return
        if "setting" not in users_history[user_id] or "genre" not in users_history[user_id] or "hero" not in users_history[user_id]:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä, –≥–µ—Ä–æ—è –∏ —Å–µ—Ç—Ç–∏–Ω–≥")
            new_story(message)
            return
        if message.text != "/begin":
            bot.send_message(message.chat.id, "–í—Å—ë —É—á—Ç–µ–º!")
            users_history[user_id]['additional_info'] = message.text
        get_promt(message)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ /begin {e}")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è

def get_promt(message):
    user_id = message.from_user.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–ø–æ—Å\n{user_id}:{message.text}")

    try:
        if len(users_history) > MAX_USERS:
            bot.send_message(message.chat.id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        if user_id not in users_history:
            new_story(message)
            return

        content = users_history[user_id]["text"]
        tokens = users_history[user_id]["tokens"]
        session_id = users_history[user_id]["session_id"]

        if session_id >= MAX_SESSIONS:
            bot.send_message(message.chat.id, "–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π")
            return
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_request = message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª

        prompt_dict = [
            {"role": "user", "content": user_request},
            {"role": "assistant", "content": ""}
        ]

        if count_tokens_in_dialogue(prompt_dict) >= MAX_TOKENS:
            bot.send_message(message.chat.id, "–°–ª–∏–∂–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
            bot.register_next_step_handler(message, get_promt)

        if user_request == "/begin":
            prompt_dict[0]["content"] = create_prompt(users_history, user_id)
        if user_request == "/end":
            prompt_dict[0]["content"] = "–ó–∞–∫–æ–Ω—á–∏ –∏—Å—Ç–æ—Ä–∏—é"

        prompt_dict[1]["content"] = content

        all_tokens = tokens + count_tokens_in_dialogue(prompt_dict)
        if is_tokens_limit(all_tokens, message.chat.id):
            return

        users_history[user_id]["tokens"] += all_tokens

        ### GPT: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        token, folder_id = get_creds()
        status, answer = gpt.ask_gpt(prompt_dict, token, folder_id)

        if not status:
            logging.info(f"{user_id}: {answer}")
            bot.send_message(user_id, text=answer)
            return

        token_prompt = [{
                "role": "user",
                "content": answer},]

        users_history[user_id]["tokens"] += count_tokens_in_dialogue(token_prompt)
        users_history[user_id]["text"] += answer

        if user_request != "/end":
            bot.send_message(user_id, text=prompt_dict[1]["content"] + answer, reply_markup=create_keyboard(["/end"]))
            bot.register_next_step_handler(message, get_promt)
        else:
            bot.send_message(user_id, text=prompt_dict[1]["content"] + answer,
                             reply_markup=create_keyboard(["/new_story"]))

        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç")



    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GPT: {e}")
        bot.send_message(user_id, "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ GPT", reply_markup=create_keyboard(["/new_story"]))


def is_tokens_limit(all_token, chat_id):
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
    try:
        tokens_of_session = all_token

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if tokens_of_session >= MAX_TOKENS_IN_SESSION:
                bot.send_message(
                    chat_id,
                    f'–í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é, –≤–≤–µ–¥—è help_with')
                return True

        elif tokens_of_session + 50 >= MAX_TOKENS_IN_SESSION:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 50 —Ç–æ–∫–µ–Ω–æ–≤
            bot.send_message(
                chat_id,
                f'–í—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç–µ—Å—å –∫ –ª–∏–º–∏—Ç—É –≤ {MAX_TOKENS_IN_SESSION} —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏. '
                f'–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ {tokens_of_session} —Ç–æ–∫–µ–Ω–æ–≤.')

        elif tokens_of_session / 2 >= MAX_TOKENS_IN_SESSION:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã
            bot.send_message(
                chat_id,
                f'–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã —Ç–æ–∫–µ–Ω–æ–≤ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏. '
                f'–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É–º–º–∞—Ä–Ω–æ {tokens_of_session} —Ç–æ–∫–µ–Ω–æ–≤.'
            )
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ {e}")

bot.polling()